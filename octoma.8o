#######
#
#   OCTOMA
#   By Cratmang
#
#######



:const DRAW_START_X 0
:const DRAW_START_Y 0
#:calc DRAW_CENTER_X { DRAW_START_X + 24} This throws an error, and I don't know how  to resolve it  right now. So instead I'm using a const that I will need  to update  later
#:calc DRAW_CENTER_Y { DRAW_START_Y + 24}
:const DRAW_CENTER_X 24
:const DRAW_CENTER_Y 24

: main
	hires
	
	#Draw Player sprite in center of the screen
	i := playerSprite
	plane 1
	v0 := DRAW_CENTER_X 
	v1 := DRAW_CENTER_Y
	sprite v0 v1 8
	v2 := 8
	i += v2
	plane 2
	sprite v0 v1 8
	
	
	i := playerPos
	load v8 - v9
	drawMap
	
	loop
		
		#v3 := key if v3 key begin
		#v0 := OCTO_KEY_W if v0 key then v9 -= 1
		#v0 := OCTO_KEY_S if v0 key then v9 += 1
		#v0 := OCTO_KEY_A if v0 key then v8 -= 1
		#v0 := OCTO_KEY_D if v0 key then v8 += 1
		
		v0 := OCTO_KEY_W if v0 key begin
			drawMap
			v9 -= 1
			moveMap
		end
		v0 := OCTO_KEY_A if v0 key begin
			drawMap
			v8 -= 1
			moveMap
		end
		v0 := OCTO_KEY_S if v0 key begin
			drawMap
			v9 += 1
			moveMap
		end
		v0 := OCTO_KEY_D if v0 key begin
			drawMap
			v8 += 1
			moveMap
		end
		
		
		#TO-DO: Add some code to delay the program a bit so that the player doesn't SPEEEEED around the map when he hold the key for longer than a few seconds.
		#				Check whatever tile the player wants to move onto to see if its a walkable tile.
		
	again
	
: moveMap
			i := playerPos
			save v8 - v9
			drawMap
	;



: health 1 0 0

: playerPos 5 5  # x y

: level 0 0 0

: exp 0 0 0

: drawMap
	v0 := DRAW_START_X  v1 := DRAW_START_Y
	i := playerPos
	load va - vb
	va -= 3	vb -= 3
	
	v2 := 0
	
	loop if v1 < 56 begin
		loop if v0 < 56 begin
			
			if vb == v9 then v2 += 1 #These two ifs are a catch to make sure we don't draw on the same tile as a player
			if va == v8 then v2 += 1 #We'll need to do something for enemies later
																# Or adjust the tiles completely
			
			if v2 != 2 then drawTile
			v2 := 0
			
			va += 1
			v0 += 8
			again
		end
		v0 := 0
		va -= 7
		vb += 1
		v1 += 8
		again
	end
;

:const TILE_SIZE 8
:const MAP_WIDTH 25

: drawTile
	#v0 =screen X, v1 = screen Y, va = X, vb = Y, vc = 25 (Width of the map), vd
	i := map
	vc := MAP_WIDTH
	vd := 0
	loop if vd < vb begin
		i += vc
		vd += 1
		again 
	end
	i += va
	load ve - ve
	#We now have the tile ID
	i := tileset
	vc := TILE_SIZE #Tile size. May need to be doubled if we decide to switch to 2 layers for the map colour
	vd := 0
	loop if vd < ve begin
		i += vc
		vd += 1
		again 
	end
	
	
	#This may seem wasteful (and it kind of is), but this makes the doors white
	if ve > 4 begin plane 1 sprite v0 v1 8 end
	if ve < 7 begin plane 2 sprite v0 v1 8 end
;

: map
# 0 = Blank space
# 1 = Ground
# 2 = Path
# 3 = Bridge
# 4 = Carpet              ^ Blue
# 5 = Door into dungeon        (Doors are drawn in blue and pink (white))
# 6 = Door out of dungeon
# 7 = Seaweed                 v Pink
# 8 = Princess's space (You win!)
# 9 = Locked Door
# 13 = Blank space (impassable)

#      |                                                          |
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 10 10 10 10 10 10 10 10 10
13 13 13 13 13 13 13 13 13 13 19 20 21 22 23 13 10 10 10 10 10 10 10 10 10
13 13 13 13 28 28 28 13 13 15 24 25 15 26 27 15 10 10 10 10 10 10 10 10 10
#------|----------------------------------------------------------|------- The above spacing is to ensure we don't have to render parts of the map that don't exist
13 13 13 28 1  1  1  13 13 14 1  15 5  15 1  14 10 10 10 10 10 10 10 10 10
13 13 13 1  1  30 1  13 13 29 15 14 2  14 15 29 10 10 10 10 10 10 10 10 10
13 13 13 1  1  2  1  13 13 13 29 29 3  29 29 13 10 10 10 5  10 10 10 10 10
13 13 13 1  1  2  1  1  1  13 13 28 3  28 28 28 10 2  2  2  2  2  10 10 10
13 13 13 1  1  2  2  1  1  13 13 1  2  1  1  1  10 2  29 29 1  2  10 10 10
13 13 13 1  1  1  2  1  1  28 13 1  2  2  2  2  2  2  10 10 29 2  10 10 10
13 13 13 29 1  1  2  1  1  1  13 29 29 29 29 1  7  7  7  7  7  2  13 13 13
13 13 13 13 1  1  2  1  1  1  28 10 10 10 10 10 29 7  7  7  7  2  13 13 13
13 13 13 13 1  1  2  1  1  2  2  2  2  2  1  1  7  7  7  7  1  2  13 13 13
13 13 13 13 1  1  2  1  1  2  16 17 18 2  1  1  1  1  1  1  1  2  13 13 13
13 13 13 13 29 1  2  2  2  2  12 5  12 2  2  2  2  2  2  2  2  2  13 13 13
13 13 13 13 13 1  1  1  1  2  2  2  2  2  1  1  1  7  1  1  7  7  13 13 13
13 13 13 13 13 29 29 29 1  1  1  1  1  1  1  29 29 29 7  7  7  29 13 13 13
13 13 13 13 13 13 13 13 29 29 29 29 29 29 29 13 13 13 29 29 29 13 13 13 13
#------|----------------------------------------------------------|------- 17
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13
#------|----------------------------------------------------------|------- 19
# TEMPLE
13 13 13 13 13 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 13 13 13 13 13 
13 13 13 13 13 11 11 11 11 11 0  0  0  0  0  11 11 11 11 11 13 13 13 13 13
13 13 13 13 13 11 11 11 0  0  0  12 0  12 0  0  0  11 11 11 13 13 13 13 13
13 13 13 13 13 11 11 0  0  0  0  0  0  0  0  0  0  0  11 11 13 13 13 13 13
13 13 13 13 13 11 0  0  0  11 0  12 0  12 0  11 0  0  0  11 13 13 13 13 13
13 13 13 13 13 11 0  0  11 11 0  0  0  0  0  11 11 0  0  11 13 13 13 13 13
13 13 13 13 13 11 0  0  11 11 11 11 6  11 11 11 11 0  0  11 13 13 13 13 13
13 13 13 13 13 11 0  0  11 11 11 11 11 11 11 11 11 0  0  11 13 13 13 13 13
13 13 13 13 13 11 0  0  0  11 11 11 11 11 11 11 0  0  0  11 13 13 13 13 13
13 13 13 13 13 11 11 0  0  0  11 11 11 11 11 0  0  0  11 11 13 13 13 13 13
13 13 13 13 13 11 11 0  12 0  0  0  0  0  0  0  12 0  11 11 13 13 13 13 13
13 13 13 13 13 11 11 0  0  0  11 11 11 11 11 0  0  0  11 11 13 13 13 13 13
13 13 13 13 13 11 0  0  0  11 11 11 11 11 11 11 0  0  0  11 13 13 13 13 13
13 13 13 13 13 11 0  0  11 11 11 0  0  0  11 11 11 0  0  11 13 13 13 13 13
13 13 13 13 13 11 0  0  11 11 11 0  8  0  11 11 11 0  0  11 13 13 13 13 13
13 13 13 13 13 11 0  0  11 11 11 0  0  0  11 11 11 0  0  11 13 13 13 13 13
13 13 13 13 13 11 0  0  0  11 11 11 0  11 11 11 0  0  0  11 13 13 13 13 13
13 13 13 13 13 11 11 0  0  0  0  0  0  0  0  0  0  0  11 11 13 13 13 13 13
13 13 13 13 13 11 11 11 0  0  0  0  0  0  0  0  0  11 11 11 13 13 13 13 13
13 13 13 13 13 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 13 13 13 13 13
#------|----------------------------------------------------------|------- 39
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13
#------|----------------------------------------------------------|------- 41
# CAVE
13 13 13 13 29 29 13 13 29 29 29 13 13 13 13 13 13 13 13 13 13 13 13 13 13
13 13 13 13 1  1  13 13 1  1  1  13 13 13 13 29 29 29 29 29 29 13 13 13 13
13 13 13 29 1  1  13 29 1  13 1  13 13 13 13 1  1  1  1  1  1  29 13 13 13
13 13 13 1  1  1  13 1  1  13 1  29 29 29 13 1  1  13 29 1  1  1  13 13 13
13 13 13 1  1  29 13 1  29 13 1  1  1  1  29 29 1  13 1  1  1  1  13 13 13
13 13 13 1  1  10 13 1  1  29 29 29 8  29 1  1  1  13 1  29 29 29 13 13 13
13 13 13 1  1  1  13 1  1  1  1  1  29 1  1  1  1  13 1  1  1  1  13 13 13
13 13 13 13 1  1  29 13 1  1  1  1  1  1  1  1  13 13 13 13 1  1  13 13 13
13 13 13 13 1  1  1  29 13 29 29 29 29 29 29 29 13 13 13 29 1  1  13 13 13
13 13 13 13 1  1  1  1  29 1  1  1  1  1  1  1  29 13 13 1  1  1  13 13 13
13 13 13 13 13 13 1  1  1  1  1  1  1  1  1  1  1  29 29 1  1  13 13 13 13
13 13 13 13 13 13 13 13 13 13 13 1  29 13 13 1  1  1  1  1  13 13 13 13 13
13 13 13 13 13 13 13 13 13 13 13 1  1  13 13 13 1  1  1  1  13 13 13 13 13
13 13 13 13 13 13 13 13 13 13 13 13 1  13 13 13 13 13 13 13 13 13 13 13 13
13 13 13 13 13 13 13 13 13 13 13 13 6  13 13 13 13 13 13 13 13 13 13 13 13
#------|----------------------------------------------------------|------- 56
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13
#------|----------------------------------------------------------|------- 59
# CASTLE DAIOUIKA
13 13 13 13 13 13 13 13 13 13 13 13 11 13 13 13 13 13 13 13 13 13 13 13 13
13 13 13 13 13 13 13 13 13 13 13 11 8  11 13 13 13 13 13 13 13 13 13 13 13
13 13 13 13 13 13 13 13 13 13 11 0  4  0  11 13 13 13 13 13 13 13 13 13 13
13 13 13 13 13 13 13 13 13 11 0  0  4  0  0  11 13 13 13 13 13 13 13 13 13
13 13 13 11 11 11 11 11 11 11 11 11 9  11 11 11 11 11 11 11 11 11 13 13 13
13 13 13 11 0  4  0  11 11 0  0  0  4  0  0  0  11 11 0  4  0  11 13 13 13
13 13 13 11 0  4  0  0  0  0  0  0  4  0  0  0  0  0  0  4  0  11 13 13 13
13 13 13 11 0  4  0  11 11 0  0  0  4  0  0  0  11 11 0  4  0  11 13 13 13
13 13 13 11 0  4  0  11 11 0  0  0  4  0  0  0  11 11 0  4  0  11 13 13 13
13 13 13 11 0  4  0  11 11 11 11 11 4  11 11 11 11 11 0  4  0  11 13 13 13
13 13 13 11 0  4  0  11 0  0  0  0  4  0  0  0  0  11 0  4  0  11 13 13 13
13 13 13 11 0  4  0  11 0  12 0  11 11 11 0  12 0  11 0  4  0  11 13 13 13
13 13 13 11 0  4  0  11 0  0  0  0  12 0  0  0  0  11 0  4  0  11 13 13 13
13 13 13 11 0  4  0  11 0  0  0  0  0  0  0  0  0  11 0  4  0  11 13 13 13
13 13 13 11 0  4  0  11 11 11 0  11 11 11 0  11 11 11 0  4  0  11 13 13 13
13 13 13 11 0  4  0  11 11 0  0  0  4  0  0  0  11 11 0  4  0  11 13 13 13
13 13 13 11 0  4  0  11 11 0 12  0  4  0  12 0  11 11 0  4  0  11 13 13 13
13 13 13 11 0  4  0  11 11 0  0  0  4  0  0  0  11 11 0  4  0  11 13 13 13
13 13 13 11 0  4  0  0  0  0 12  0  4  0  12 0  0  0  0  4  0  11 13 13 13
13 13 13 11 0  4  0  11 11 0  0  0  4  0  0  0  11 11 0  4  0  11 13 13 13
13 13 13 11 0  4  0  11 11 0 12  0  4  0  12 0  11 11 0  4  0  11 13 13 13
13 13 13 11 11 11 11 11 11 0  0  0  4  0  0  0  11 11 11 11 11 11 13 13 13
13 13 13 13 13 13 13 13 11 11 11 11 6  11 11 11 11 13 13 13 13 13 13 13 13
#------|----------------------------------------------------------|------- 82
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13



: tileset
# Each tile is 8x8 pixels, using either blue or pink. 8 numbers per tile.
# If there's enough space and time, I'll adjust the code to 16 numbers per tile so that
#   all tiles can use blue, pink, and white at the same time.

#0 = Blank Space
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
#1 = Ground
0x00 0x20 0x00 0x00 0x02 0x00 0x40 0x00
#2 = Pathway
0x0C 0xC0 0x02 0x60 0x00 0x06 0x20 0x80
#3 = Bridge
0xBD 0xBD 0x81 0xBD 0xBD 0x81 0xBD 0x81
#4 = Carpet
0xBD 0xBD 0xBD 0xBD 0xBD 0xBD 0xBD 0xBD
#5 = Door into dungeon
0x00 0x18 0x24 0x42 0x42 0x42 0x42 0x00
#6 = Door out of dungeon
0x00 0x00 0x18 0x3C 0x3C 0x3C 0x3C 0x00
#7 = Seaweed
0xA4 0xEA 0x54 0x56 0x6B 0xF5 0x95 0x22
#8 = Princess's space
0x55 0xAA 0x55 0xAA 0x55 0xAA 0x55 0xAA
#9 = Locked Door
0x00 0x18 0x3C 0x7E 0x76 0x76 0x7E 0x00
#10 = Cliff Wall
0x44 0x15 0x51 0x55 0x54 0x04 0x45 0x51
#11 = Brick
0xEE 0x00 0xBB 0x00 0x77 0x00 0xDD 0x00
#12 = Pillar
0xFF 0x7E 0x24 0x24 0x24 0x24 0x7E 0xFF
#13 = Blank Space (impassable)
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
#14 = Tower
0x18 0x7E 0x0C 0x7E 0x18 0x7E 0x30 0x7E
#15 = Tower Top
0x99 0xFF 0x00 0x7E 0x2C 0x6E 0x3C 0x7E
#16, 17, 18 = Temple roof
0x00 0x00 0x00 0x03 0x0C 0x33 0xCF 0x00
0x00 0x3C 0xC3 0x18 0xE7 0xDB 0xE7 0xFF
0x00 0x00 0x00 0xC0 0x30 0xCC 0xF3 0x00
#19-27 = Sunset  over Castle Daiouika
0x00 0x00 0x00 0x00 0x00 0x01 0x03 0x07
0x00 0x07 0x1F 0x7F 0xFF 0xFF 0xFF 0xFE
0xEF 0xE3 0xEC 0xEF 0xEC 0xE3 0xEF 0x00
0x00 0xE0 0x78 0x7E 0xFF 0xFF 0xFF 0x7F
0x00 0x00 0x00 0x00 0x00 0x80 0xC0 0xE0
0x07 0x0F 0x0F 0x1F 0x1F 0x00 0xFF 0x00
0xFE 0xFE 0xFE 0xFE 0xFE 0x00 0xFF 0x00
0x7F 0x7F 0x7F 0x7F 0x7F 0x00 0xFF 0x00
0xE0 0xF0 0xF0 0xF8 0xF8 0x00 0xFF 0x00
#28 = Cliff North Edge
0x00 0x00 0x00 0x00 0x00 0x00 0xCE 0xB3
#29 = Cliff South Edge and wall
0x10 0xAD 0x66 0x11 0x55 0x44 0x11 0x44
#30 = Fort
0x1C 0x1C 0x10 0xDB 0xFF 0x00 0x66 0x66	

: playerSprite
0x02 0x32 0x7A 0x6A 0xB7 0x82 0x22 0xC2
0x02 0x32 0x52 0x6A 0xB0 0xE8 0x2E 0xC0

: enemies


































