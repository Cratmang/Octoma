#######
#
#   OCTOMA
#   By Cratmang
#
#######

# It is EXTREMELY recommded that you play the game on LUDICROUS SPEED, otherwise the game will be far too slow.
#  (500-1000 cycles/frame might work, but may also trigger epilepsy)

# DEFAULT COLOURS (CGA 1):
# Background  : #000000 (Black)
# Foreground 1: #FF00FF (Fuchsia)
# Foreground 2: #00FFFF (Cyan)
# Blended     : #FFFFFF (White)
# Buzzer      : #000000
# Silence     : #000000

:const DRAW_START_X 4
:const DRAW_START_Y 4
:calc DRAW_CENTER_X { DRAW_START_X + 24 }
:calc DRAW_CENTER_Y { DRAW_START_Y + 24 }
:calc DRAW_END_X { DRAW_START_X + ( 8 * 7 ) }
:calc DRAW_END_Y { DRAW_START_Y + ( 8 * 7 ) }

:const TILE_SIZE 16
:calc TILE_HALF { TILE_SIZE / 2 }
:const MAP_WIDTH 24

: font
	0x40 0xA0 0xE0 0xA0 0xA0  0x80 0x80 0xC0 0xA0 0xC0  0x60 0x80 0x80 0x80 0x60  0xC0 0xA0 0xA0 0xA0 0xC0 # A B C D
	0xE0 0x80 0xE0 0x80 0xE0  0x60 0x40 0xE0 0x40 0x40  0xE0 0x80 0x80 0xA0 0xE0  0x80 0x80 0xC0 0xA0 0xA0 # E F G H
	0x40 0x00 0x40 0x40 0x40  0xE0 0x40 0x40 0x40 0xC0  0xA0 0xA0 0xC0 0xA0 0xA0  0x80 0x80 0x80 0x80 0xE0 # I J K L
	0x00 0x00 0xC0 0xA0 0xA0  0x00 0xE0 0xa0 0xE0 0x00  0xC0 0xA0 0xC0 0x80 0x80  0xE0 0xA0 0xA0 0xC0 0x20 # N O P Q
	0x00 0x00 0xC0 0x80 0x80  0xC0 0x80 0xC0 0x40 0xC0  0xE0 0x40 0x40 0x40 0x40  0x00 0x00 0xA0 0xA0 0xE0 # R S T U
	0xA0 0xA0 0xA0 0xA0 0x40  0x00 0xA0 0x40 0xA0 0x00  0xA0 0xA0 0x40 0x40 0x40  0xE0 0x20 0x40 0x80 0xE0 # V X Y Z
	0x40 0x40 0x40 0x00 0x40  0x00 0x00 0x00 0x00 0x40  0xC0 0x20 0x60 0x00 0x40  0x40 0xC0 0x40 0x40 0xE0 # ! . ? 1
	0xC0 0x20 0x60 0x80 0xE0  0xC0 0x20 0xC0 0x20 0xC0  0x20 0xA0 0xE0 0x20 0x20  0xE0 0x80 0xC0 0x20 0xC0 # 2 3 4 5
	0x60 0x80 0xE0 0xA0 0xE0  0xE0 0x20 0x40 0xE0 0x40  0xE0 0xA0 0x40 0xA0 0xE0  0xE0 0xA0 0xE0 0x20 0x20 # 6 7 8 9
	0xE0 0xA0 0xA0 0xA0 0xE0  0x00 0x40 0x00 0x40 0x00  0x40 0x80 0x80 0x80 0x40  0x40 0x20 0x20 0x20 0x40 # 0 : ( )
	
# M and W are near-illegeble when they're only 3 pixels wide, so I'm seperating them from the rest of the font.
: fontMW 
	0xF0 0xA8 0xA8 0xA8 0xA8  0x88 0xA8 0xA8 0xA8 0x50 
	
:stringmode text "ABCDEFGHIJKLNOPQRSTUVXYZ!.?1234567890:()" {
	:calc addr { font + VALUE * 5 }
	i := addr
	sprite v0 v1 5
	v0 += 4
}
:stringmode text "MW" {
	:calc addr { fontMW + VALUE * 5 }
	i := addr
	sprite v0 v1 5
	v0 += 6
}
:stringmode text " " { v0 += 3 }
:stringmode text "/" { v1 += 7 v0 := v2 }

:const maxEnemies 8
:calc enemyControlLimit { maxEnemies * 5 }
:calc enemySpawnLimit { maxEnemies * 3 }

: main
	hires
	
	#Draw Frame 
	i := long frame-corner-nw
	v0 := 0 v1 := 2
	plane 1 sprite v0 v1 2
	plane 2 sprite v0 v1 2
	i := long frame-corner-sw
	v0 := 0 v1 := DRAW_END_Y
	plane 1 sprite v0 v1 2
	plane 2 sprite v0 v1 2
	i := long frame-corner-ne
	v0 := DRAW_END_X v1 := 2
	plane 1 sprite v0 v1 2
	plane 2 sprite v0 v1 2
	i := long frame-corner-se
	v0 := DRAW_END_X v1 := DRAW_END_Y
	plane 1 sprite v0 v1 2
	plane 2 sprite v0 v1 2
	
	i := long frame-h
	v0 := DRAW_START_X
	v1 := 1
	loop
		plane 1 sprite v0 v1 1
		plane 2 sprite v0 v1 1
		v0 += 8
		if v0 == DRAW_END_X begin
			v0 := DRAW_START_X
			v1 += 61
		end
	if v1 < 64 then again
	
	i := long frame-v
	v0 := 1
	v1 := DRAW_START_Y
	loop
		plane 1 sprite v0 v1 1
		plane 2 sprite v0 v1 1
		v1 += 1
		if v1 == DRAW_END_Y begin
			v1 := DRAW_START_Y
			v0 += 61
		end
	if v0 < 64 then again
	
	#UI TEXT (Placeholder)
	v0 := DRAW_END_X v0 += 6 v2 := v0
	v1 := 1
	plane 1
	text "HP: 0640/" 
	plane 2
	text "MP: 420 BLAZE IT/" 
	text "EXP: TOO COOL/"
	plane 1
	v1 -= 7
	text "EXP: TOO COOL/"
	text "LV: GOOD ENOUGH"
	
	#Draw Player sprite in center of the screen
	i := long playerSprite
	plane 1
	v0 := DRAW_CENTER_X 
	v1 := DRAW_CENTER_Y
	sprite v0 v1 8
	v2 := 8
	i += v2
	plane 2
	sprite v0 v1 8
	
	#Set up enemies
	v7 := 0
	v6 := 0
	loop while v7 != enemySpawnLimit
		i := long enemy-spawn-overworld
		spawnEnemy
	again
	
	i := playerPos
	load v8 - v9
	drawMap
	drawEnemies
	
	#v3 and v4 represent the X and Y location that the player will try to access
	v3 := v8 v4 := v9
	
	#v7 will check to see if the player has made an input.
	v7 := 0
	
	loop
		
		v0 := OCTO_KEY_W if v0 key begin
			v4 -= 1
			v7 := 1
		end
		v0 := OCTO_KEY_A if v0 key begin
			v3 -= 1
			v7 := 1
		end
		v0 := OCTO_KEY_X if v0 key begin
			v4 += 1
			v7 := 1
		end
		v0 := OCTO_KEY_D if v0 key begin
			v3 += 1
			v7 := 1
		end
		v0 := OCTO_KEY_S if v0 key begin
			#No movement, Doesn't work yet - The collision check conflicts with the player position
			v7 := 1
			vd := 3
		end
		
		
    if v7 != 0 begin
			#Input recieved. Now to see if it's a valid move...
			va := v3 vb := v4 vc := 0
			checkCollision
			if vd != 2 begin

				i := playerPos
				load v8 - v9
				drawMap
				drawEnemies
				v8 := v3 v9 := v4
				va := v8 vb := v9
				getTileID
				if ve == 5 begin #Entering Dungeon
					v7 := 0
					v6 := 0
					if v9 == 3 begin #Entering Daiouika Castle
						v8 := 12
						v9 := 81
						loop while v7 != enemySpawnLimit
							i := long enemy-spawn-castle
							spawnEnemy
						again
					end 
					if v9 == 5 begin #Entering the Lost Caves
						v8 := 12
						v9 := 55
						loop while v7 != enemySpawnLimit
							i := long enemy-spawn-cave
							spawnEnemy
						again
					end 
					if v9 == 13 begin #Entering Temple 8
						v8 := 12
						v9 := 25
						loop while v7 != enemySpawnLimit
							i := long enemy-spawn-temple
							spawnEnemy
						again
					end 
				end 
				if ve == 6 begin #Exiting Dungeon
					v7 := 0
					v6 := 0
					loop while v7 != enemySpawnLimit
						i := long enemy-spawn-overworld
						spawnEnemy
					again
					if v9 == 81 begin #Daiouika Castle
						v8 := 12
						v9 := 4
					end 
					if v9 == 55 begin #Lost Caves
						v8 := 19
						v9 := 5
					end 
					if v9 == 25 begin #Temple 8
						v8 := 11
						v9 := 13
					end 
				end


				i := playerPos
				save v8 - v9

				#Enemy movement
				# Loop through each enemy
				#  Check where the player is
				#  Move toward the player
				#    Movement needs to account for walls
				v7 := 0
				loop
					i := enemies
					i += v7
					load va - vc
					if vc != 0 begin
						load v3 - v4
						v4 -= v9
						v4 += 5
						if v4 < 10 begin
							v3 -= v8
							v3 += 5
							if v3 < 10 begin			

								if v4 > 5 begin
									vb -= 1
									checkCollision
									if vd == 2 then vb += 1
								end
								if v4 < 5 begin
									vb += 1
									checkCollision
									if vd == 2 then vb -= 1
								end
								if v3 > 5 begin
									va -= 1
									checkCollision
									if vd == 2 then va += 1
								end
								if v3 < 5 begin
									va += 1
									checkCollision
									if vd == 2 then va -= 1
								end
								i := enemies
								i += v7 
								save va - vb

					end end end

					v7 += 5
				if v7 != enemyControlLimit then again

				drawMap
				drawEnemies
				i := long audio-step
				v2 := 3
				v1 := 34 pitch := v1
				audio buzzer := v2

				va := v8 vb := v9
				getTileID
				if ve == 9 begin # We found treasure!

					# Convert chest into opened chest.
					ve := 10
					save ve - ve

					# Get loot dropped
					v1 := 50
					if v9 == 33 begin
						#Got the sword!
						i := long swordSprite
						v0 := 66
						plane 1 sprite v0 v1 10
						v2 := 10 i += v2
						plane 2 sprite v0 v1 10
					end
					if v9 == 46 begin
						#Got the armor!
						i := long armourSprite
						v0 := 75
						plane 1 sprite v0 v1 8
						v2 := 8 i += v2
						plane 2 sprite v0 v1 8
					end
					if v9 > 58 begin
						#Got the key from killing the wizard!
						i := long keySprite
						v0 := 84
						plane 1 sprite v0 v1 9
						v2 := 9 i += v2
						plane 2 sprite v0 v1 9
						i := access
						load v0
						v0 += 1
						save v0
					end

					#Play victory jingle!
					i := long audio-note
					v1 := 96 v2 := 12
					pitch := v1
					audio buzzer := v2
					vf := 7
					delay := vf
					loop
						vf := delay
						if vf != 0 then
					again
					v1 := 120
					pitch := v1
					audio buzzer := v2
				end
			end
			v3 := v8 v4 := v9
			V7 := 1
			
			#Delay to prevent the player from just ZOOMING across the map
			# Copied from the default Octo example project. I only barely understand how it works.
			vf := 7
			delay := vf
			loop
				vf := delay
				if vf != 0 then
			again
			v7 := 0
		end
		
	again

: spawnEnemy
	#Assumes that i is already set to the list of enemies to spawn, otherwise we're gonna have a problem.
	#Load
	i += v7
	load v2 # X, Y, and ID
	
	i := bestiary
	i += v2 i += v2
	load v3 - v4 #Attack and health
	
	i := enemies
	i += v6
	save v4
	
	#  Next spawn, or trigger exit loop
	v7 += 3
	v6 += 5
;

: getTileID
# Gets the ID of a tile on the map, determined by va (X) and vb (Y), and then loads it to ve.
	
	vd := vb
	if vb > 58 begin #The map is cut into sections 
		i := map-castle
		vd -= 59
	else if vb > 40 begin
		i := map-cave
		vd -= 41
	else if vb > 18 begin
		i := map-temple
		vd -= 19
	else
		i := map-world
	end end end
	
	vd += vd # 2
	vd += vd # 4
	vd += vd # 8, if we go higher, we risk hitting an interger overflow
	i  += vd #  ... So let's just start pumping it into the i register
	i  += vd # 16
	i  += vd # 24! This is the row we want.
	i += va # Add in the X value, and we find the ID we're looking for.
	
	load ve - ve
;

: checkCollision
	#Check if tile is walkable (Unless the enemy we're moving is a Skull)
	getTileID
	i := access load v5 - v5
	vd := 0
	#Skulls ignore walls
	if vc == 4 then ve := 0
	if ve <= v5 begin
	
	#Check if enemy is standing on tile
		ve := 0
		loop 
			i := enemies
			i += ve
			load v5 - v6
			
			#va and vb SHOULD have the coordinates of the tile we're checking
			if va == v5 then vd += 1
			if vb == v6 then vd += 1
			if vd != 2 then vd := 0
			
			if vd == 2 begin ve := enemyControlLimit ve -= 5 end # Get us out of the loop! There is an enemy here!
			ve += 5
		if ve != enemyControlLimit then again
		
		#Check if player is standing on tile (If we're checking for enemy movement)
		if vc != 0 begin
		if vd != 2 begin
			i := playerPos
			load v8 - v9
			if va == v8 then vd += 1
			if vb == v9 then vd += 1
			if vd != 2 then vd := 0
		end end
		
	else
		vd := 2 #Skulls ignore walls
	end
;


###  PLAYER STATS

: health 1 0 0

: playerPos 5 5  # x y

: level 0 0 0

: exp 0 0 0

: access 10
# This is the highest ID tile that the player (and enemies) can walk through.
# If the player gets the key from killing the Wizard, they can also walk through the locked door.


### ENEMY STATS
: enemies
#X  Y  ID HP STRENGTH
 0  0  0  0  0 # 0  / 1
 0  0  0  0  0 # 5  / 2
 0  0  0  0  0 # 10 / 3
 0  0  0  0  0 # 15 / 4
 0  0  0  0  0 # 20 / 5
 0  0  0  0  0 # 25 / 6
 0  0  0  0  0 # 30 / 7
 0  0  0  0  0 # 35 / 8

: bestiary
#Example Entry: 3 HP, 5 Strength

#0 = Dead or non-existant
0 0

#1 = Shrimp
1 1

#2 = Lobster
2 3

#3 = Waterbear
4 5

#4 = Skull
1 10

#5 = Squid
5 6

#6 = Wizard
10 17

: drawEnemies
	#Erase/redraw tiles that enemies are standing on
	#We might erase the above code and implement drawing enemies into this
	v7 := 0
	loop
		i := enemies
		i += v7
		load v2
		v0 -= v8 #v8 and v9 should still be holding the player position
		v0 += 3 #Raises v0 above "negative" value
		if v0 < 7 begin #If the enemy is within the field of view
			v0 += v0 #2
			v0 += v0 #4
			v0 += v0 #8
			v0 += DRAW_START_X #Offset
			v1 -= v9
			v1 += 3
			if v1 < 7 begin
				v1 += v1
				v1 += v1
				v1 += v1
				v1 += DRAW_START_Y
				load va - vb
				drawTile #Erase tile
				
				#Now draw enemy
				i := long enemiesSprites 
				v2 -= 1
				v2 += v2 #Enemy ID * 2
				v2 += v2 # * 4
				v2 += v2 # * 8
				v2 += v2 # * 16
				i += v2
				plane 1 sprite v0 v1 8
				v2 := 8 i += v2
				plane 2 sprite v0 v1 8
				
		end end
		v7  += 5
	if v7 != enemyControlLimit then again
;


### DRAW MAP AND TILES

: drawMap
	v0 := DRAW_START_X  v1 := DRAW_START_Y
	i := playerPos
	load va - vb
	va -= 3	vb -= 3
	
	v2 := 0
	
	loop if v1 != DRAW_END_Y begin
		loop if v0 != DRAW_END_X begin
			
			if vb == v9 then v2 += 1 #These two ifs are a catch to make sure we don't draw on the same tile as a player
			if va == v8 then v2 += 1 #We'll need to do something for enemies later
																# Or adjust the tiles completely
			
			if v2 != 2 then drawTile
			v2 := 0
			
			va += 1
			v0 += 8
			again
		end
		v0 := DRAW_START_X
		va -= 7
		vb += 1
		v1 += 8
		again
	end
;

: drawTile
	#v0 =screen X, v1 = screen Y, va = X, vb = Y, vc = 25 (Width of the map), vd
	getTileID
	i := long tileset
	ve += ve #2
	ve += ve #4
	i += ve
	i += ve # 8
	i += ve
	i += ve # 16
	
	plane 1 sprite v0 v1 8 
	vc := TILE_HALF i += vc
	plane 2 sprite v0 v1 8 
;

	

### WORLD MAP

: map-world
# x>   2 (The player may not pass this point)                     22      y
#      |                                                          |       v
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 31 31 31 31 31 31 31 31 
13 13 13 13 13 13 13 13 13 13 19 20 21 22 23 13 31 31 31 31 31 31 31 31 
13 13 13 13 28 28 28 13 13 15 24 25 15 26 27 15 31 31 31 31 31 31 31 31 
#------|----------------------------------------------------------|------- 2 (The above spacing is to ensure we don't have to render parts of the map that don't exist)
13 13 13 28 1  1  1  13 13 14 1  15 5  15 1  14 31 31 31 31 31 31 31 31 
13 13 13 1  1  30 1  13 13 29 15 14 2  14 15 29 31 31 31 31 31 31 31 31 
13 13 13 1  1  2  1  28 28 13 29 29 3  29 29 13 31 31 31 5  31 31 31 31 
13 13 13 1  1  2  1  1  1  13 13 28 3  28 28 28 31 2  2  2  2  2  31 31 
13 13 13 1  1  2  2  1  1  13 13 1  2  1  1  1  31 2  29 29 1  2  31 31
13 13 13 1  1  1  2  1  1  28 13 1  2  2  2  2  2  2  31 31 29 2  31 31 
13 13 13 29 1  1  2  1  1  1  13 29 29 29 29 1  7  7  7  7  7  2  13 13
13 13 13 13 1  1  2  1  1  1  28 31 31 31 31 31 29 7  7  7  7  2  13 13 
13 13 13 13 1  1  2  1  1  2  2  2  2  2  1  1  7  7  7  7  1  2  13 13 
13 13 13 13 1  1  2  1  1  2  16 17 18 2  1  1  1  1  1  1  1  2  13 13 
13 13 13 13 29 1  2  2  2  2  12 5  12 2  2  2  2  2  2  2  2  2  13 13 
13 13 13 13 13 1  1  1  1  2  2  2  2  2  1  1  1  7  1  1  7  7  13 13 
13 13 13 13 13 29 29 29 1  1  1  1  1  1  1  29 29 29 7  7  7  29 13 13 
13 13 13 13 13 13 13 13 29 29 29 29 29 29 29 13 13 13 29 29 29 13 13 13 
#------|----------------------------------------------------------|------- 16 
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 
#------|----------------------------------------------------------|------- 18
: map-temple
13 13 13 13 13 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 13 13 13 13  
13 13 13 13 13 32 32 32 32 32 0  0  0  0  0  32 32 32 32 32 13 13 13 13 
13 13 13 13 13 32 32 32 0  0  0  12 0  12 0  0  0  32 32 32 13 13 13 13 
13 13 13 13 13 32 32 0  0  0  0  0  0  0  0  0  0  0  32 32 13 13 13 13 
13 13 13 13 13 32 0  0  0  32 0  12 0  12 0  32 0  0  0  32 13 13 13 13 
13 13 13 13 13 32 0  0  32 32 0  0  0  0  0  32 32 0  0  32 13 13 13 13 
13 13 13 13 13 32 0  0  32 32 32 32 6  32 32 32 32 0  0  32 13 13 13 13 
13 13 13 13 13 32 0  0  32 32 32 32 32 32 32 32 32 0  0  32 13 13 13 13 
13 13 13 13 13 32 0  0  0  32 32 32 32 32 32 32 0  0  0  32 13 13 13 13 
13 13 13 13 13 32 32 0  0  0  32 32 32 32 32 0  0  0  32 32 13 13 13 13 
13 13 13 13 13 32 32 0  12 0  0  0  0  0  0  0  12 0  32 32 13 13 13 13 
13 13 13 13 13 32 32 0  0  0  32 32 32 32 32 0  0  0  32 32 13 13 13 13 
13 13 13 13 13 32 0  0  0  32 32 32 32 32 32 32 0  0  0  32 13 13 13 13 
13 13 13 13 13 32 0  0  32 32 32 0  0  0  32 32 32 0  0  32 13 13 13 13 
13 13 13 13 13 32 0  0  32 32 32 0  9  0  32 32 32 0  0  32 13 13 13 13
13 13 13 13 13 32 0  0  32 32 32 0  0  0  32 32 32 0  0  32 13 13 13 13 
13 13 13 13 13 32 0  0  0  32 32 32 0  32 32 32 0  0  0  32 13 13 13 13 
13 13 13 13 13 32 32 0  0  0  0  0  0  0  0  0  0  0  32 32 13 13 13 13 
13 13 13 13 13 32 32 32 0  0  0  0  0  0  0  0  0  32 32 32 13 13 13 13 
13 13 13 13 13 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 13 13 13 13 
#------|----------------------------------------------------------|------- 38
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 
#------|----------------------------------------------------------|------- 40
: map-cave
13 13 13 13 29 29 13 13 29 29 29 13 13 13 13 13 13 13 13 13 13 13 13 13 
13 13 13 13 1  1  13 13 1  1  1  13 13 13 13 29 29 29 29 29 29 13 13 13 
13 13 13 29 1  1  13 29 1  13 1  13 13 13 13 1  1  1  1  1  1  29 13 13 
13 13 13 1  1  1  13 1  1  13 1  29 29 29 13 1  1  13 29 1  1  1  13 13 
13 13 13 1  1  29 13 1  29 13 1  1  1  1  29 29 1  13 1  1  1  1  13 13 
13 13 13 1  1  31 13 1  1  29 29 29 9  29 1  1  1  13 1  29 29 29 13 13 
13 13 13 1  1  1  13 1  1  1  1  1  29 1  1  1  1  13 1  1  1  1  13 13 
13 13 13 13 1  1  29 13 1  1  1  1  1  1  1  1  13 13 13 13 1  1  13 13 
13 13 13 13 1  1  1  29 13 29 29 29 29 29 29 29 13 13 13 29 1  1  13 13 
13 13 13 13 1  1  1  1  29 1  1  1  1  1  1  1  29 13 13 1  1  1  13 13 
13 13 13 13 13 13 1  1  1  1  1  1  1  1  1  1  1  29 29 1  1  13 13 13
13 13 13 13 13 13 13 13 13 13 13 1  29 13 13 1  1  1  1  1  13 13 13 13 
13 13 13 13 13 13 13 13 13 13 13 1  1  13 13 13 1  1  1  1  13 13 13 13 
13 13 13 13 13 13 13 13 13 13 13 13 1  13 13 13 13 13 13 13 13 13 13 13 
13 13 13 13 13 13 13 13 13 13 13 13 6  13 13 13 13 13 13 13 13 13 13 13 
#------|----------------------------------------------------------|------- 55
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13
#------|----------------------------------------------------------|------- 58
: map-castle
13 13 13 13 13 13 13 13 13 13 13 13 33 13 13 13 13 13 13 13 13 13 13 13
13 13 13 13 13 13 13 13 13 13 13 33 8  33 13 13 13 13 13 13 13 13 13 13 
13 13 13 13 13 13 13 13 13 13 33 0  4  0  33 13 13 13 13 13 13 13 13 13
13 13 13 13 13 13 13 13 13 33 0  0  4  0  0  33 13 13 13 13 13 13 13 13
13 13 13 33 33 33 33 33 33 33 33 33 11 33 33 33 33 33 33 33 33 33 13 13 
13 13 13 33 0  4  0  33 33 0  0  0  4  0  0  0  33 33 0  4  0  33 13 13
13 13 13 33 0  4  0  0  0  0  0  0  4  0  9  0  0  0  0  4  0  33 13 13
13 13 13 33 0  4  0  33 33 0  0  0  4  0  0  0  33 33 0  4  0  33 13 13 
13 13 13 33 0  4  0  33 33 0  0  0  4  0  0  0  33 33 0  4  0  33 13 13
13 13 13 33 0  4  0  33 33 33 33 33 4  33 33 33 33 33 0  4  0  33 13 13
13 13 13 33 0  4  0  33 0  0  0  0  4  0  0  0  0  33 0  4  0  33 13 13 
13 13 13 33 0  4  0  33 0  12 0  33 33 33 0  12 0  33 0  4  0  33 13 13
13 13 13 33 0  4  0  33 0  0  0  0  12 0  0  0  0  33 0  4  0  33 13 13
13 13 13 33 0  4  0  33 0  0  0  0  0  0  0  0  0  33 0  4  0  33 13 13 
13 13 13 33 0  4  0  33 33 33 0  33 33 33 0  33 33 33 0  4  0  33 13 13
13 13 13 33 0  4  0  33 33 0  0  0  4  0  0  0  33 33 0  4  0  33 13 13
13 13 13 33 0  4  0  33 33 0 12  0  4  0  12 0  33 33 0  4  0  33 13 13 
13 13 13 33 0  4  0  33 33 0  0  0  4  0  0  0  33 33 0  4  0  33 13 13
13 13 13 33 0  4  0  0  0  0 12  0  4  0  12 0  0  0  0  4  0  33 13 13
13 13 13 33 0  4  0  33 33 0  0  0  4  0  0  0  33 33 0  4  0  33 13 13 
13 13 13 33 0  4  0  33 33 0 12  0  4  0  12 0  33 33 0  4  0  33 13 13
13 13 13 33 33 33 33 33 33 0  0  0  4  0  0  0  33 33 33 33 33 33 13 13
13 13 13 13 13 13 13 13 33 33 33 33 6  33 33 33 33 13 13 13 13 13 13 13 
#------|----------------------------------------------------------|------- 81
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 

### ENEMY SPAWN LISTS
#I wanted to do random spawns, but this is much easier.
#QUICK ID REFRECE:
#1 = Shrimp
#2 = Lobster
#3 = Waterbear
#4 = Skull
#5 = Squid
#6 = Wizard
: enemy-spawn-overworld
#X  Y  ID
 6  10 1 #1
 7  14 1 #2
 15 14 1 #3
 20 7  2 #4
 11 7  2 #5
 0  0  0 #6
 0  0  0 #7
 0  0  0 #8
: enemy-spawn-cave
#X  Y  ID
 11 50 3 #1
 19 52 3 #2
 4  42 3 #3
 13 45 3 #4
 15 47 3 #5
 2  51 4 #6
 21 44 4 #7
 13 41 4 #8
: enemy-spawn-temple
#X  Y  ID
 8  27 2 #1
 16 27 2 #2
 12 29 2 #3
 8  36 2 #4
 16 36 2 #5
 12 33 2 #6
 0  0  0 #7
 0  0  0 #8
: enemy-spawn-castle
#X  Y  ID
 12 66 6 #1
 12 69 5 #2
 5  71 5 #3
 19 71 5 #4
 11 74 5 #5
 13 74 5 #6
 10 72 5 #7
 14 72 5 #8



### SPRITES
# Each sprite is 8x8 pixels, and is drawn in two layers: Pink, then Blue. Overlapping pixels turn white.

: tileset

#0 = Blank Space
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

#1 = Ground
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x20 0x00 0x00 0x02 0x00 0x40 0x00

#2 = Pathway
0x0C 0xC0 0x02 0x60 0x00 0x06 0x20 0x80
0x0C 0xC0 0x02 0x60 0x00 0x06 0x20 0x80

#3 = Bridge
0x81 0x81 0x81 0x81 0x81 0x81 0x81 0x81
0xBD 0xBD 0x81 0xBD 0xBD 0x81 0xBD 0x81

#4 = Carpet
0x42 0x42 0x42 0x42 0x42 0x42 0x42 0x42 
0x7E 0x7E 0x7E 0x7E 0x7E 0x7E 0x7E 0x7E

#5 = Door into dungeon
0x00 0x18 0x24 0x42 0x42 0x42 0x42 0x00
0x00 0x18 0x24 0x42 0x42 0x42 0x42 0x00

#6 = Door out of dungeon
0x00 0x00 0x18 0x3C 0x3C 0x3C 0x3C 0x00
0x00 0x00 0x18 0x3C 0x3C 0x3C 0x3C 0x00

#7 = Seaweed
0xAA 0xBE 0xCD 0x7E 0xED 0xEF 0x77 0xEE
0x00 0x24 0x48 0x48 0x44 0x22 0x22 0x44

#8 = Princess's space
0x00 0x22 0x71 0x5A 0xB1 0x84 0x20 0x6E 
0x0E 0x3E 0x29 0x5A 0xB1 0xF4 0x38 0x6E

#9 = Treasure
0x00 0x7C 0x3E 0x08 0x3E 0x3E 0x3E 0x00 
0x00 0xFC 0x7E 0x80 0xF6 0xFE 0x7E 0x00

#10 = Treasure Opened
0x00 0x30 0x00 0x00 0x3E 0x3E 0x3E 0x00 
0x00 0x00 0xFC 0x82 0xFE 0xFE 0x7E 0x00 

#11 = Locked Door
0x00 0x7E 0x7E 0x7E 0x76 0x76 0x7E 0x00
0x00 0x7E 0x42 0x42 0x42 0x42 0x42 0x00

#12 = Pillar
0xFF 0x7E 0x3C 0x3C 0x3C 0x3C 0x7E 0xFF
0xFF 0x00 0x28 0x28 0x28 0x28 0x00 0xFF

#13 = Blank Space (impassable)
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

#14 = Tower
0x18 0x7E 0x0C 0x7E 0x18 0x7E 0x30 0x7E
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

#15 = Tower Top
0x99 0xFF 0x00 0x7E 0x3C 0x7E 0x3C 0x7E
0x00 0x00 0x00 0x00 0x10 0x10 0x00 0x00

#16, 17, 18 = Temple roof
0x00 0x00 0x00 0x03 0x0C 0x33 0xCF 0x3F
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

0x00 0x3C 0xDB 0x3C 0xFF 0xFF 0xFF 0xFF
0x00 0x00 0x18 0x24 0x18 0x24 0x18 0x00

0x00 0x00 0x00 0xC0 0x30 0xCC 0xF3 0xFC
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

#19-27 = Sunset  over Castle Daiouika
0x00 0x00 0x00 0x00 0x00 0x01 0x03 0x07
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

0x00 0x07 0x1F 0x7F 0xFF 0xFF 0xFF 0xFE
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

0xC7 0xD3 0xCC 0xCF 0xCC 0xC3 0xC7 0x00
0x00 0x10 0x10 0x10 0x10 0x10 0x10 0x00

0x00 0xE0 0x78 0x7E 0xFF 0xFF 0xFF 0x7F
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

0x00 0x00 0x00 0x00 0x00 0x80 0xC0 0xE0
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

0x00 0x0F 0x0F 0x00 0x1F 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0x00

0x00 0xFE 0xFE 0x00 0xFF 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0x00

0x00 0x7F 0x7F 0x00 0xFF 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0x00

0x00 0xF0 0xF0 0x00 0xF8 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0x00

#28 = Cliff North Edge
0x00 0x00 0x00 0x00 0x00 0x00 0xCE 0xB3
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

#29 = Cliff South Edge and wall
0x10 0xAD 0x66 0x11 0x55 0x44 0x11 0x44
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

#30 = Fort
0x1C 0x1C 0x10 0xDB 0xFF 0x7E 0x66 0x66 
0x0C 0x0C 0x00 0xDB 0xFF 0x00 0x66 0x66

#31 = Cliff Wall
0x44 0x15 0x51 0x55 0x54 0x04 0x45 0x51
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

#32 = Brick
0xEE 0x00 0xBB 0x00 0x77 0x00 0xDD 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

#33 = Castle Brick
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xEE 0x00 0xBB 0x00 0x77 0x00 0xDD 0x00

: playerSprite
0x02 0x32 0x7A 0x6A 0xB7 0x82 0x22 0xC2
0x02 0x32 0x52 0x6A 0xB0 0xE8 0x2E 0xC0

: enemiesSprites
#1 = Shrimp
0x00 0x3C 0x39 0x76 0x68 0x46 0x20 0x00
0x00 0x14 0x00 0x00 0x00 0x00 0x00 0x00

#2 = Lobster
0x00 0x0E 0x1F 0x3F 0x0C 0x5F 0x5C 0x3F
0x00 0x00 0x00 0x00 0x00 0x57 0x54 0x07

#3 = Waterbear
0x00 0x3E 0x7F 0xFF 0xFF 0xFF 0x5E 0x55
0x00 0x36 0x5B 0xEB 0xAB 0xEB 0x14 0x15

#4 = Skull
0x38 0x7C 0xBA 0xBA 0x7C 0x44 0x54 0x38
0x38 0x7C 0xBA 0x92 0x7C 0x00 0x54 0x38

#5 = Squid
0x0C 0x1E 0x3F 0x80 0x9E 0x6C 0x92 0x7E
0x0C 0x1E 0x03 0x8A 0x8E 0x04 0x80 0x58

#6 = Wizard
0x18 0x3C 0x7E 0xFF 0x18 0x3C 0xBD 0x66
0x18 0x3C 0x7E 0xFF 0x24 0xBD 0x99 0x00

#The artifacts kind of break the 8x8 rule, since they don't need to be drawn on a grid.

: swordSprite #10 px
0x10 0x18 0x10 0x18 0x10 0x18 0x3C 0x18 0x08 0x18 
0x01 0x82 0x41 0x82 0x40 0x00 0x3C 0x08 0x18 0x18

: armourSprite #8 px
0x18 0x3C 0x66 0xDB 0xD3 0x66 0xFF 0x7E
0x00 0x3C 0x7E 0x7E 0x7E 0x7E 0x3C 0x00

: keySprite #9px
0x08 0x1C 0x3E 0x14 0x1C 0x08 0x18 0x08 0x18
0x08 0x1C 0x3E 0x00 0x1C 0x08 0x08 0x08 0x08


# The frame that the world/map is drawn within.
#  The corners are all 2x2 in white. The border is a single pixel line.

: frame-corner-nw
0x30 0x20

: frame-corner-ne
0xC0 0x40

: frame-corner-sw
0x20 0x30

: frame-corner-se
0x40 0xC0

: frame-h
0xFF 

: frame-v
0x80

: audio-step
3 5 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 

: audio-note
255 0 255 0 255 0 255 0 255 0 255 0 255 0 255 0





















